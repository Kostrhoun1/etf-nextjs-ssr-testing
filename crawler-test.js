#!/usr/bin/env node

/**
 * ü§ñ CRAWLER TEST pro SSR a SEO readability
 * 
 * Testuje, jestli homepage obsahuje ve≈°ker√Ω obsah v HTML bez nutnosti JavaScript
 */

const https = require('https');

class CrawlerTest {
  constructor() {
    this.url = 'https://etfpruvodce.cz';
    this.results = {
      isSSR: false,
      hasETFData: false,
      hasCategories: false,
      hasSearch: false,
      hasStructuredData: false,
      hasMetaTags: false,
      issues: []
    };
  }

  async fetchHomepage() {
    return new Promise((resolve, reject) => {
      https.get(this.url, (res) => {
        let data = '';
        res.on('data', (chunk) => data += chunk);
        res.on('end', () => resolve(data));
      }).on('error', reject);
    });
  }

  analyzeHTML(html) {
    console.log('ü§ñ ANAL√ùZA HOMEPAGE PRO CRAWLERY');
    console.log('=================================\n');

    // Test 1: Z√°kladn√≠ SSR check
    console.log('üìä Test 1: Server-Side Rendering');
    console.log('----------------------------------');
    
    if (html.includes('__NEXT_DATA__')) {
      console.log('‚úÖ Next.js SSR detekov√°n');
      this.results.isSSR = true;
    } else {
      console.log('‚ùå Next.js SSR NOT found');
      this.results.issues.push('Missing Next.js SSR data');
    }

    // Test 2: ETF data v HTML
    console.log('\nüìà Test 2: ETF Data v HTML Source');
    console.log('-----------------------------------');
    
    const etfIndicators = ['IWDA', 'SWDA', 'TER', 'iShares', 'Vanguard', '0,', '%'];
    const foundETFs = etfIndicators.filter(indicator => html.includes(indicator));
    
    if (foundETFs.length >= 5) {
      console.log(`‚úÖ ETF data p≈ô√≠tomna (${foundETFs.length}/${etfIndicators.length} indik√°tor≈Ø)`);
      console.log(`   Nalezeno: ${foundETFs.join(', ')}`);
      this.results.hasETFData = true;
    } else {
      console.log(`‚ùå Nedostatek ETF dat (${foundETFs.length}/${etfIndicators.length})`);
      this.results.issues.push('Insufficient ETF data in HTML');
    }

    // Test 3: Kategorie
    console.log('\nüìÇ Test 3: ETF Kategorie');
    console.log('--------------------------');
    
    const categories = ['Akciov√©', 'Dluhopisy', 'Nemovitosti', 'Komodity', 'Krypto'];
    const foundCategories = categories.filter(cat => html.includes(cat));
    
    if (foundCategories.length >= 4) {
      console.log(`‚úÖ Kategorie p≈ô√≠tomny (${foundCategories.length}/${categories.length})`);
      console.log(`   Nalezeno: ${foundCategories.join(', ')}`);
      this.results.hasCategories = true;
    } else {
      console.log(`‚ùå Chyb√≠ kategorie (${foundCategories.length}/${categories.length})`);
      this.results.issues.push('Missing categories in HTML');
    }

    // Test 4: Structured Data (JSON-LD)
    console.log('\nüè∑Ô∏è Test 4: Structured Data (Schema.org)');
    console.log('------------------------------------------');
    
    if (html.includes('application/ld+json') || html.includes('"@type"')) {
      console.log('‚úÖ Structured data p≈ô√≠tomna');
      this.results.hasStructuredData = true;
    } else {
      console.log('‚ö†Ô∏è  Structured data nenalezena');
      this.results.issues.push('Missing structured data');
    }

    // Test 5: Meta tagy
    console.log('\nüè∑Ô∏è Test 5: SEO Meta Tags');
    console.log('--------------------------');
    
    const metaChecks = {
      title: html.includes('<title>') && html.includes('ETF'),
      description: html.includes('name="description"'),
      keywords: html.includes('name="keywords"') || html.includes('ETF'),
      canonical: html.includes('rel="canonical"'),
      viewport: html.includes('name="viewport"')
    };
    
    const passedMeta = Object.entries(metaChecks).filter(([key, passed]) => passed);
    
    if (passedMeta.length >= 4) {
      console.log(`‚úÖ Meta tags OK (${passedMeta.length}/5)`);
      console.log(`   Passed: ${passedMeta.map(([key]) => key).join(', ')}`);
      this.results.hasMetaTags = true;
    } else {
      console.log(`‚ö†Ô∏è  Meta tags ne√∫pln√© (${passedMeta.length}/5)`);
      this.results.issues.push('Incomplete meta tags');
    }

    // Test 6: Kritick√© obsahy pro SEO
    console.log('\nüìù Test 6: SEO-kritick√Ω obsah');
    console.log('-------------------------------');
    
    const seoContent = [
      'Nejlep≈°√≠ ETF podle kategori√≠',
      'ETF fond≈Ø',
      'srovn√°n√≠',
      'investice',
      'Global search' // Mohlo by b√Ωt probl√©m
    ];
    
    const foundContent = seoContent.filter(content => html.includes(content));
    console.log(`‚úÖ SEO obsah: ${foundContent.length}/${seoContent.length} nalezeno`);
    console.log(`   Obsah: ${foundContent.join(', ')}`);

    // Test 7: Client-only probl√©my
    console.log('\n‚ö†Ô∏è  Test 7: Client-only Content Check');
    console.log('--------------------------------------');
    
    const clientOnlyIndicators = [
      'Loading...',
      'useEffect',
      'useState',
      'Please enable JavaScript',
      'noscript'
    ];
    
    const foundClientOnly = clientOnlyIndicators.filter(indicator => html.includes(indicator));
    
    if (foundClientOnly.length === 0) {
      console.log('‚úÖ ≈Ω√°dn√© client-only obsahy');
    } else {
      console.log(`‚ö†Ô∏è  Mo≈æn√© client-only obsahy: ${foundClientOnly.join(', ')}`);
    }

    // Test 8: HTML velikost a struktura
    console.log('\nüìä Test 8: HTML Struktura');
    console.log('---------------------------');
    
    const htmlSize = html.length;
    const hasProperStructure = html.includes('<html') && html.includes('<head') && html.includes('<body');
    
    console.log(`üì¶ HTML velikost: ${Math.round(htmlSize / 1024)}KB`);
    console.log(`üèóÔ∏è  HTML struktura: ${hasProperStructure ? '‚úÖ Spr√°vn√°' : '‚ùå Chybn√°'}`);
    
    if (htmlSize < 50000) {
      console.log('‚ö†Ô∏è  HTML m≈Ø≈æe b√Ωt p≈ô√≠li≈° mal√© (< 50KB)');
    } else if (htmlSize > 500000) {
      console.log('‚ö†Ô∏è  HTML m≈Ø≈æe b√Ωt p≈ô√≠li≈° velk√© (> 500KB)');
    } else {
      console.log('‚úÖ HTML velikost v po≈ô√°dku');
    }
  }

  generateReport() {
    console.log('\nüéØ V√ùSLEDKY CRAWLER TESTU');
    console.log('==========================\n');

    const score = [
      this.results.isSSR,
      this.results.hasETFData, 
      this.results.hasCategories,
      this.results.hasMetaTags
    ].filter(Boolean).length;

    console.log(`üìä CELKOV√â HODNOCEN√ç: ${score}/4`);
    
    if (score === 4) {
      console.log('üü¢ VYNIKAJ√çC√ç: Homepage je plnƒõ crawler-friendly!');
    } else if (score >= 3) {
      console.log('üü° DOBR√â: Vƒõt≈°ina obsahu je dostupn√° crawler≈Øm');
    } else {
      console.log('üî¥ PROBL√âMY: Homepage m√° SEO issues');
    }

    console.log('\nüìã Detailn√≠ v√Ωsledky:');
    console.log(`   SSR: ${this.results.isSSR ? '‚úÖ' : '‚ùå'}`);
    console.log(`   ETF Data: ${this.results.hasETFData ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Kategorie: ${this.results.hasCategories ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Meta Tags: ${this.results.hasMetaTags ? '‚úÖ' : '‚ùå'}`);

    if (this.results.issues.length > 0) {
      console.log('\n‚ö†Ô∏è  NALEZEN√â PROBL√âMY:');
      this.results.issues.forEach(issue => console.log(`   - ${issue}`));
    }

    console.log('\n‚ú® CRAWLER DOPORUƒåEN√ç:');
    console.log('----------------------');
    console.log('‚úÖ Pou≈æ√≠vej SSR pro v≈°echen kritick√Ω obsah');
    console.log('‚úÖ ETF data mus√≠ b√Ωt v HTML source');
    console.log('‚úÖ P≈ôidej structured data (JSON-LD)');
    console.log('‚úÖ Optimalizuj meta tagy pro ka≈ædou str√°nku');
    console.log('‚úÖ Minimalizuj client-only content');
  }

  async run() {
    try {
      console.log(`üåê Testuji: ${this.url}\n`);
      const html = await this.fetchHomepage();
      this.analyzeHTML(html);
      this.generateReport();
    } catch (error) {
      console.error('‚ùå Crawler test failed:', error.message);
    }
  }
}

// Spu≈°tƒõn√≠ testu
if (require.main === module) {
  const test = new CrawlerTest();
  test.run().catch(console.error);
}

module.exports = CrawlerTest;